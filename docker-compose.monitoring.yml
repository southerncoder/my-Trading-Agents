# =====================================================================================
# Trading Agents - Monitoring System Docker Compose Extension
# =====================================================================================
# This file extends the main docker-compose.yml with PostgreSQL database and
# monitoring-specific configurations for the integrated monitoring system.
#
# Usage:
#   docker compose -f docker-compose.yml -f docker-compose.monitoring.yml up
#
# This adds:
# - PostgreSQL database with pgvector extension for monitoring data
# - Enhanced trading-agents service with monitoring capabilities
# - Monitoring-specific volumes and networks
# =====================================================================================

services:
  # ============================================================================
  # DATABASE LAYER - PostgreSQL for Monitoring
  # ============================================================================

  # PostgreSQL Database for Monitoring Data
  postgresql:
    image: pgvector/pgvector:pg16
    container_name: trading-agents-postgresql
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-trading_agents}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    secrets:
      - postgres_password
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - postgresql_logs:/var/log/postgresql
      - ./services/trading-agents/src/monitoring/monitoring-schema.sql:/docker-entrypoint-initdb.d/01-monitoring-schema.sql:ro
    networks:
      - trading-agents
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-trading_agents}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    command: >
      postgres
      -c shared_preload_libraries=vector
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=1000

  # ============================================================================
  # ENHANCED APPLICATION LAYER
  # ============================================================================

  # Enhanced Trading Agents with Monitoring
  trading-agents:
    extends:
      service: trading-agents
    environment:
      # PostgreSQL Configuration
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-trading_agents}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SSL=false
      - POSTGRES_POOL_SIZE=${POSTGRES_POOL_SIZE:-10}
      - POSTGRES_CONNECTION_TIMEOUT=${POSTGRES_CONNECTION_TIMEOUT:-60000}
      - POSTGRES_IDLE_TIMEOUT=${POSTGRES_IDLE_TIMEOUT:-30000}
      - POSTGRES_MAX_USES=${POSTGRES_MAX_USES:-7500}
      - POSTGRES_ALLOW_EXIT_ON_IDLE=${POSTGRES_ALLOW_EXIT_ON_IDLE:-true}

      # Monitoring Configuration
      - MONITORING_ENABLED=${MONITORING_ENABLED:-true}
      - MONITORING_PERFORMANCE_ENABLED=${MONITORING_PERFORMANCE_ENABLED:-true}
      - MONITORING_PERFORMANCE_INTERVAL=${MONITORING_PERFORMANCE_INTERVAL:-30000}
      - MONITORING_ALERTS_ENABLED=${MONITORING_ALERTS_ENABLED:-true}
      - MONITORING_ANOMALY_DETECTION_ENABLED=${MONITORING_ANOMALY_DETECTION_ENABLED:-true}
      - MONITORING_HEALTH_CHECK_INTERVAL=${MONITORING_HEALTH_CHECK_INTERVAL:-60000}

      # Alert Thresholds
      - MONITORING_SHARPE_THRESHOLD=${MONITORING_SHARPE_THRESHOLD:-0.5}
      - MONITORING_DRAWDOWN_THRESHOLD=${MONITORING_DRAWDOWN_THRESHOLD:-0.2}
      - MONITORING_VOLATILITY_THRESHOLD=${MONITORING_VOLATILITY_THRESHOLD:-0.3}

      # Anomaly Detection Configuration
      - MONITORING_ZSCORE_THRESHOLD=${MONITORING_ZSCORE_THRESHOLD:-2.0}
      - MONITORING_PERCENTILE_THRESHOLD=${MONITORING_PERCENTILE_THRESHOLD:-95}
      - MONITORING_ROLLING_WINDOW_SIZE=${MONITORING_ROLLING_WINDOW_SIZE:-30}

      # Alert Configuration
      - MONITORING_ALERT_COOLDOWN=${MONITORING_ALERT_COOLDOWN:-15}
      - MONITORING_MAX_ALERTS_PER_HOUR=${MONITORING_MAX_ALERTS_PER_HOUR:-10}

      # Storage Configuration
      - MONITORING_STORAGE_PERFORMANCE=${MONITORING_STORAGE_PERFORMANCE:-postgresql}
      - MONITORING_STORAGE_HEALTH=${MONITORING_STORAGE_HEALTH:-postgresql}
      - MONITORING_STORAGE_ALERTS=postgresql
      - MONITORING_STORAGE_GRAPH=zep_graphiti

      # Logging Configuration
      - MONITORING_LOG_LEVEL=${MONITORING_LOG_LEVEL:-info}
      - MONITORING_STRUCTURED_LOGGING=${MONITORING_STRUCTURED_LOGGING:-true}
      - MONITORING_PERFORMANCE_LOGS=${MONITORING_PERFORMANCE_LOGS:-true}
      - MONITORING_HEALTH_LOGS=${MONITORING_HEALTH_LOGS:-true}

      # pgvector Configuration
      - PGVECTOR_ENABLED=${PGVECTOR_ENABLED:-true}
      - PGVECTOR_DIMENSIONS=${PGVECTOR_DIMENSIONS:-1536}
      - PGVECTOR_SIMILARITY_THRESHOLD=${PGVECTOR_SIMILARITY_THRESHOLD:-0.8}

      # Notification Configuration (optional)
      - ALERT_EMAIL_TO=${ALERT_EMAIL_TO:-}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - SLACK_CHANNEL=${SLACK_CHANNEL:-#trading-alerts}
      - WEBHOOK_URL=${WEBHOOK_URL:-}
      - WEBHOOK_AUTH_TOKEN=${WEBHOOK_AUTH_TOKEN:-}

    # Add PostgreSQL secret
    secrets:
      - postgres_password

    depends_on:
      postgresql:
        condition: service_healthy

    volumes:
      # Add monitoring-specific volumes
      - ./data/monitoring:/app/data/monitoring:rw
      - ./logs/monitoring:/app/logs/monitoring:rw
      - ./exports/monitoring:/app/exports/monitoring:rw

    # Add monitoring-specific health check
    healthcheck:
      test: ["CMD", "node", "-e", "
        const { createIntegratedMonitoringSystem } = require('./dist/monitoring/index.js');
        const system = createIntegratedMonitoringSystem();
        system.getSystemStatus().then(status => {
          process.exit(status.initialized && status.metrics.systemHealth !== 'unhealthy' ? 0 : 1);
        }).catch(() => process.exit(1));
      "]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

# ============================================================================
# VOLUMES - Enhanced with Monitoring
# ============================================================================

volumes:
  # PostgreSQL data persistence
  postgresql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgresql

  postgresql_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/postgresql

  # Monitoring data persistence
  monitoring_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/monitoring

  monitoring_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/monitoring

# ============================================================================
# NETWORKS - No changes needed, uses existing trading-agents network
# ============================================================================

# ============================================================================
# MONITORING PROFILES
# ============================================================================

# ============================================================================
# SECRETS - Additional secrets for monitoring
# ============================================================================

secrets:
  # PostgreSQL Secrets
  postgres_password:
    file: ./docker/secrets/postgres_password.txt

# ============================================================================
# PROFILES - Additional profiles for different monitoring scenarios
# ============================================================================

# Additional profiles for different monitoring scenarios
profiles:
  # Development monitoring profile
  - monitoring-dev
  # Production monitoring profile  
  - monitoring-prod
  # Minimal monitoring profile
  - monitoring-minimal