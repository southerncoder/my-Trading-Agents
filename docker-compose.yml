# =====================================================================================
# Trading Agents - Consolidated Docker Compose Configuration
# =====================================================================================
# This file consolidates all services into a single, comprehensive setup while
# maintaining clear separation of concerns across different layers.
#
# Architecture Layers:
# 1. Database Layer: Neo4j for knowledge graph storage
# 2. AI/Memory Layer: Zep-Graphiti for enhanced memory and AI processing
# 3. Data Services Layer: Reddit and News aggregation services
# 4. Application Layer: Main trading agents application
#
# Environment Variables:
# - All configuration is in .env.local (see .env.example for template)
# - Run: docker compose --env-file .env.local up
# - Or set: export COMPOSE_FILE=docker-compose.yml and export ENV_FILE=.env.local
# =====================================================================================

services:
  # ============================================================================
  # DATABASE LAYER
  # ============================================================================

  # PostgreSQL Database for Structured Data and Agent Memory
  postgresql:
    image: pgvector/pgvector:pg16
    container_name: trading-agents-postgresql
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./services/trading-agents/database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - trading-agents
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-trading_agents}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache for Multi-Level Caching System
  redis:
    image: redis:7.4-alpine
    container_name: trading-agents-redis
    ports:
      - "6379:6379"
    secrets:
      - redis_password
    command: >
      sh -c "
        if [ -f /run/secrets/redis_password ] && [ -s /run/secrets/redis_password ]; then
          REDIS_PASSWORD=$$(cat /run/secrets/redis_password)
          redis-server --requirepass $$REDIS_PASSWORD --appendonly yes --appendfsync everysec
        else
          redis-server --appendonly yes --appendfsync everysec
        fi
      "
    volumes:
      - redis_data:/data
    networks:
      - trading-agents
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Neo4j Database for Knowledge Graph Storage
  neo4j:
    image: neo4j:5.26.0
    container_name: trading-agents-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - trading-agents
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # ============================================================================
  # AI/MEMORY LAYER
  # ============================================================================

  # Zep Graphiti Memory Service
  zep-graphiti:
    image: zepai/graphiti:latest
    container_name: trading-agents-zep-graphiti
    ports:
      - "8000:8000"

    environment:
      NEO4J_URI: bolt://trading-agents-neo4j:7687
      EMBEDDER_PROVIDER: openai
    # Using centralized secrets
    secrets:
      - openai_api_key
      - embedder_api_key
      - neo4j_user
      - neo4j_password
      - brave_news_api_key
      - news_api_key
      - reddit_client_id
      - reddit_client_secret
      - reddit_refresh_token
      - reddit_username
      - reddit_password
      - marketstack_api_key
      - local_lmstudio_base_url
      - local_lmstudio_api_key
      - remote_lmstudio_base_url
      - remote_lmstudio_api_key
    volumes:
      - ./services/zep_graphiti/graph_service/zep_graphiti.py:/app/graph_service/zep_graphiti.py:ro
      - ./services/zep_graphiti/secrets/init.py:/init.py:ro
    command: ["python3", "/init.py", "uvicorn", "graph_service.main:app", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - trading-agents
    healthcheck:
      test: ["CMD", "python3", "-c", "import socket; s=socket.socket(); s.connect(('localhost',8000)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # ============================================================================
  # DATA SERVICES LAYER
  # ============================================================================

  # Reddit Sentiment Analysis Service (FEATURE-FLAGGED)
  reddit-service:
    profiles: ["reddit"]  # Only starts when --profile reddit is used
    build:
      context: ./services/reddit-service
      dockerfile: Dockerfile
    image: reddit-service:latest
    container_name: trading-reddit-service
    restart: unless-stopped

    environment:
      - NODE_ENV=production
      - PORT=3001
      - LOG_LEVEL=info

    # Using centralized secrets
    secrets:
      - reddit_client_id
      - reddit_client_secret
      - reddit_refresh_token
      - reddit_username
      - reddit_password
      - reddit_service_api_key

    ports:
      - "3001:3001"

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3001/health').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/reddit-service.log:rw,noexec,nosuid,size=50m

    # Network isolation
    networks:
      - reddit-network
      - trading-agents

  # Unified News Aggregator Service
  news-aggregator:
    build:
      context: ./services/news-aggregator-service
      dockerfile: Dockerfile
    image: news-aggregator-service:latest
    container_name: trading-news-aggregator
    restart: unless-stopped

    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - PORT=3004

    # Using centralized secrets
    secrets:
      - tavily_api_key
      - brave_news_api_key
      - news_api_key
      - yahoo_finance_api_key

    ports:
      - "3004:3004"

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

    # Health check
    healthcheck:
      test: ["CMD", "node", "healthcheck.cjs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/news-aggregator-service.log:rw,noexec,nosuid,size=50m

    # Network isolation
    networks:
      - trading-agents

  # Government Data Service
  government-data:
    build:
      context: ./services/government-data-service
      dockerfile: Dockerfile
    image: government-data-service:latest
    container_name: trading-government-data
    restart: unless-stopped

    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - PORT=3005

    # Using centralized secrets
    secrets:
      - fred_api_key
      - bls_api_key

    ports:
      - "3005:3005"

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3005/health').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/logs:rw,noexec,nosuid,size=50m

    # Network isolation
    networks:
      - trading-agents

  # ============================================================================
  # WEB SERVICES LAYER
  # ============================================================================

  # Web API Backend
  web-api:
    build:
      context: ./services/web-api
      dockerfile: Dockerfile
    container_name: trading-agents-web-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CORS_ORIGIN=http://localhost:3000
      - FRONTEND_URL=http://localhost:3000
    secrets:
      - openai_api_key
      - anthropic_api_key
      - google_api_key
    ports:
      - "3001:3001"
    networks:
      - trading-agents
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Web Frontend
  web-frontend:
    build:
      context: ./services/web-frontend
      dockerfile: Dockerfile
    container_name: trading-agents-web-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:3001/api
      - VITE_WS_URL=ws://localhost:3001
    ports:
      - "3000:80"
    depends_on:
      web-api:
        condition: service_healthy
    networks:
      - trading-agents
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ============================================================================
  # APPLICATION LAYER
  # ============================================================================

  # Main Trading Agents Application
  trading-agents:
    build:
      context: ./services/trading-agents
      dockerfile: Dockerfile
      target: production
    image: trading-agents:latest
    container_name: trading-agents-cli
    restart: unless-stopped

    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - REDDIT_SERVICE_URL=http://reddit-service:3001
      - NEWS_AGGREGATOR_URL=http://news-aggregator:3004
      - GOVERNMENT_DATA_URL=http://government-data:3005
      - ZEP_GRAPHITI_URL=http://zep-graphiti:8000
      - NEO4J_URI=bolt://neo4j:7687
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_SSL=false
      - POSTGRES_POOL_SIZE=20
      - POSTGRES_CONNECTION_TIMEOUT=30000
      - POSTGRES_IDLE_TIMEOUT=10000

    # Using centralized secrets
    secrets:
      - openai_api_key
      - anthropic_api_key
      - google_api_key
      - embedder_api_key
      - tavily_api_key
      - brave_news_api_key
      - news_api_key
      - finnhub_api_key
      - alpha_vantage_api_key
      - marketstack_api_key
      - reddit_client_id
      - reddit_client_secret
      - reddit_refresh_token
      - reddit_username
      - reddit_password
      - neo4j_user
      - neo4j_password
      - redis_password
      - postgres_user
      - postgres_password
      - postgres_db
      - fred_api_key
      - bls_api_key
      - local_lmstudio_base_url
      - local_lmstudio_api_key
      - remote_lmstudio_base_url
      - remote_lmstudio_api_key

    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - ./exports:/app/exports:rw
      - ./services/trading-agents/config:/app/config:ro

    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      zep-graphiti:
        condition: service_started
      news-aggregator:
        condition: service_healthy
      government-data:
        condition: service_healthy
      web-api:
        condition: service_healthy
      # reddit-service dependency removed - will only be included when --profile reddit is used

    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

    networks:
      - trading-agents

  # ============================================================================
  # MONITORING SERVICES (Profile: monitoring)
  # ============================================================================

  # Local Docker Registry (Profile: registry)
  registry:
    profiles: ["registry"]
    image: registry:2
    container_name: trading-agents-registry
    restart: unless-stopped
    ports:
      - "${LOCAL_REGISTRY_BIND:-127.0.0.1}:5000:5000"
    volumes:
      - ./docker/registry_data:/var/lib/registry
      - ./docker/certs:/certs:ro
    environment:
      - REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt
      - REGISTRY_HTTP_TLS_KEY=/certs/domain.key
    networks:
      - trading-agents

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  # Internal network for Reddit service (only created when reddit profile is active)
  reddit-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

  # Main trading network with external access
  trading-agents:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  # PostgreSQL data persistence
  postgresql_data:
    driver: local

  # Redis data persistence
  redis_data:
    driver: local

  # Neo4j data persistence
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local

  # Trading agents data persistence
  trading-data:
    driver: local
  trading-logs:
    driver: local

# ============================================================================
# SECRETS - Centralized Secret Management
# ============================================================================

secrets:
  # OpenAI and AI Provider Secrets
  openai_api_key:
    file: ./docker/secrets/openai_api_key.txt
  anthropic_api_key:
    file: ./docker/secrets/anthropic_api_key.txt
  google_api_key:
    file: ./docker/secrets/google_api_key.txt
  embedder_api_key:
    file: ./docker/secrets/embedder_api_key.txt

  # News and Data Provider Secrets
  tavily_api_key:
    file: ./docker/secrets/tavily_api_key.txt
  brave_news_api_key:
    file: ./docker/secrets/brave_news_api_key.txt
  news_api_key:
    file: ./docker/secrets/news_api_key.txt
  yahoo_finance_api_key:
    file: ./docker/secrets/yahoo_finance_api_key.txt

  # Market Data Provider Secrets
  finnhub_api_key:
    file: ./docker/secrets/finnhub_api_key.txt
  alpha_vantage_api_key:
    file: ./docker/secrets/alpha_vantage_api_key.txt
  marketstack_api_key:
    file: ./docker/secrets/marketstack_api_key.txt

  # Reddit API Secrets
  reddit_client_id:
    file: ./docker/secrets/reddit_client_id.txt
  reddit_client_secret:
    file: ./docker/secrets/reddit_client_secret.txt
  reddit_refresh_token:
    file: ./docker/secrets/reddit_refresh_token.txt
  reddit_username:
    file: ./docker/secrets/reddit_username.txt
  reddit_password:
    file: ./docker/secrets/reddit_password.txt
  reddit_service_api_key:
    file: ./docker/secrets/reddit_service_api_key.txt

  # Database Secrets
  neo4j_user:
    file: ./docker/secrets/neo4j_user.txt
  neo4j_password:
    file: ./docker/secrets/neo4j_password.txt
  redis_password:
    file: ./docker/secrets/redis_password.txt
  postgres_user:
    file: ./docker/secrets/postgres_user.txt
  postgres_password:
    file: ./docker/secrets/postgres_password.txt
  postgres_db:
    file: ./docker/secrets/postgres_db.txt

  # Government Data API Keys
  fred_api_key:
    file: ./docker/secrets/fred_api_key.txt
  bls_api_key:
    file: ./docker/secrets/bls_api_key.txt

  # LM Studio Configuration
  local_lmstudio_base_url:
    file: ./docker/secrets/local_lmstudio_base_url.txt
  local_lmstudio_api_key:
    file: ./docker/secrets/local_lmstudio_api_key.txt

  # Remote LM Studio
  remote_lmstudio_base_url:
    file: ./docker/secrets/remote_lmstudio_base_url.txt
  remote_lmstudio_api_key:
    file: ./docker/secrets/remote_lmstudio_api_key.txt